#!/usr/bin/env node
'use strict';
var update = require('../lib/update');
var citgm = require('../lib/citgm');
var logger = require('../lib/out');
var app = require('commander');

var mod, test;
app
  .version('0.2.3')
  .arguments('<module>')
  .action(function(m) {
    mod = m;
  })
  .option(
    '-v, --verbose [level]',
    'Verbose output (silly, verbose, info, warn, error)',
    /^(silly|verbose|info|warn|error)$/i, 'info')
  .option(
    '-l, --lookup <path>',
    'Use the lookup table provided at <path>'
  )
  .option(
    '-d, --nodedir <path>',
    'Path to the node source to use when compiling native addons'
  )
  .option(
    '-n, --no-color', 'Turns off colorized output'
  )
  .option(
    '-s, --su', 'Allow running the tool as root.'
  );

if (!citgm.windows) {
  app.option(
    '-u, --uid <uid>', 'Set the uid (posix only)'
  )
  .option(
    '-g, --gid <uid>', 'Set the gid (posix only)'
  );
}

app.parse(process.argv);

var log = logger({
  level:app.verbose,
  nocolor: !app.color
});

update(log);

if (!mod) {
  app.outputHelp();
  process.exit(0);
}

if (!app.su) {
  require('root-check')(); // silently downgrade if running as root...
                           // unless --su is passed
} else {
  log.warn('root', 'Running as root! Use caution!');
}

var options = {
  lookup: app.lookup,
  nodedir: app.nodedir,
  level: app.verbose
};

if (!citgm.windows) {
  var uidnumber = require('uid-number');
  var uid = app.uid || process.getuid();
  var gid = app.gid || process.getgid();
  uidnumber(uid, gid, function(err, uid, gid) {
    options.uid = uid;
    options.gid = gid;
    launch(mod, options);
  });
} else {
  launch(mod, options);
}

function launch(mod, options) {
  citgm.Tester(mod, options)
  .on('start', function(name) {
    log.info('starting', name);
  }).on('fail', function(err) {
    log.error('failure', err.message);
  }).on('data', function(type, key, message) {
    log[type](key, message);
  }).on('end', function(module) {
    if (module.error) {
      process.exitCode = 1;
      log.error('done', 'The test suite for ' + module.name + ' version ' + module.version + ' failed');
      process.exit();
    }
    log.info('done', 'The test suite for ' + module.name + ' version ' + module.version + ' passed.');
  }).run();
}
