#!/usr/bin/env node
'use strict';
var app = require('commander');
var async = require('async');
var _ = require('lodash');
var chalk = require('chalk');

var update = require('../lib/update');
var citgm = require('../lib/citgm');
var logger = require('../lib/out');
var getLookup = require('../lib/lookup').get;

app
  .version('0.2.3')
  .action(function() {
  })
  .option(
    '-v, --verbose [level]',
    'Verbose output (silly, verbose, info, warn, error)',
    /^(silly|verbose|info|warn|error)$/i, 'info')
  .option(
    '-l, --lookup <path>',
      'Use the lookup table provided at <path>'
  )
  .option(
      '-d, --nodedir <path>',
      'Path to the node source to use when compiling native addons'
  )
  .option(
    '-n, --no-color', 'Turns off colorized output'
  )
  .option(
    '-s, --su', 'Allow running the tool as root.'
  )
  .option(
    '-m, --markdown', 'Output results in markdown'
  );

if (!citgm.windows) {
  app.option(
    '-u, --uid <uid>', 'Set the uid (posix only)'
  )
  .option(
    '-g, --gid <uid>', 'Set the gid (posix only)'
  );
}

app.parse(process.argv);

var log = logger({
  level: app.verbose,
  nocolor: !app.color
});

update(log);

if (!app.su) {
  require('root-check')(); // silently downgrade if running as root...
                           // unless --su is passed
} else {
  log.warn('root', 'Running as root! Use caution!');
}

var options = {
  lookup: app.lookup,
  nodedir: app.nodedir,
  level: app.verbose
};

var lookup = getLookup(options);

if (!citgm.windows) {
  var uidnumber = require('uid-number');
  var uid = app.uid || process.getuid();
  var gid = app.gid || process.getgid();
  uidnumber(uid,gid, function(err, uid, gid) {
    options.uid = uid;
    options.gid = gid;
    launch(options);
  });
} else {
  launch(options);
}

var exitCode = 0;
var failed = [];
var passed = [];
var flakey = [];

function runCitgm (mod, name, next) {
  if (mod.skip) {
    next();
    return;
  }
  
  citgm.Tester(name, options)
  .on('start', function(name) {
    log.info('starting', name);
  }).on('fail', function(err) {
    log.error('failure', err.message);
  }).on('data', function(type,key,message) {
    log[type](key, message);
  }).on('end', function(module) {
    if (module.error) {
      log.error('done', 'The test suite for ' + module.name + ' version ' + module.version + ' failed');
      if (mod.flakey) {
        flakey.push(module);
      }
      else {
        exitCode = 1;
        failed.push(module);
      }
    }
    else {
      passed.push(module);
      log.info('done', 'The test suite for ' + module.name + ' version ' + module.version + ' passed.');
    }
    next();
  }).run();
}

function printModule(logType, module) {
  log[logType](chalk.yellow('module name:'), module.name);
  log[logType](chalk.yellow('version:'), module.version);
  if (module.error) {
    log[logType]('error', module.error.message);
  }
}

function printModules(logType, modules) {
  _.each(modules, function (module) {
    printModule(logType, module);
  });
}

function printModulesMarkdown(title, modules) {
  /*eslint-disable no-console*/
  if (modules.length > 0) {
    console.log('### ' + title + ' Modules');
    _.each(modules, function (module) {
      console.log('* ' + module.name);
      console.log('  - version ' + module.version);
      if (module.error) {
        console.log('  * ' + module.error.message);
      }
    });
    console.log('');
  }
  /*eslint-enable no-console*/
}

function printMarkdown() {
  /*eslint-disable no-console*/
  if (failed.length === 0) {
    console.log('## 🎉🎉 CITGM Passed 🎉🎉')
  }
  else {
    console.log('## 🔥⚠️🔥 CITGM FAILED 🔥⚠️🔥')
  }
  /*eslint-enable no-console*/
  printModulesMarkdown('Passing', passed);
  printModulesMarkdown('Flakey', flakey);
  printModulesMarkdown('Failing', failed);
}

function launch() {
  async.forEachOfSeries(lookup, runCitgm, function done () {
    if (passed.length > 0) {
      log.info('passing modules');
      printModules('info', passed);
    }
    if (flakey.length > 0) {
      log.warn('flakey modules');
      printModules('warn', flakey);
    }
    if (failed.length > 0) {
      process.exitCode = exitCode;
      log.error('failing modules');
      printModules('error', failed);
      log.error('done', 'citgm-all failed');
    }
    else {
      log.info('done', 'citgm-all passed.');
    }
    if (app.markdown) {
      printMarkdown();
    }
    process.exit(exitCode);
  });
}
